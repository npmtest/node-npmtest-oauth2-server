{"/home/travis/build/npmtest/node-npmtest-oauth2-server/test.js":"/* istanbul instrument in package npmtest_oauth2_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/lib.npmtest_oauth2_server.js":"/* istanbul instrument in package npmtest_oauth2_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_oauth2_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_oauth2_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-oauth2-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_oauth2_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_oauth2_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_oauth2_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_oauth2_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_oauth2_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_oauth2_server.__dirname + '/lib.npmtest_oauth2_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/oauth2server.js":"/**\n * Copyright 2013-present NightWorld.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar error = require('./error'),\n  AuthCodeGrant = require('./authCodeGrant'),\n  Authorise = require('./authorise'),\n  Grant = require('./grant');\n\nmodule.exports = OAuth2Server;\n\n/**\n * Constructor\n *\n * @param {Object} config Configuration object\n */\nfunction OAuth2Server (config) {\n\n  if (!(this instanceof OAuth2Server)) return new OAuth2Server(config);\n\n  config = config || {};\n\n  if (!config.model) throw new Error('No model supplied to OAuth2Server');\n  this.model = config.model;\n\n  this.grants = config.grants || [];\n  this.debug = config.debug || function () {};\n  if (typeof this.debug !== 'function') {\n      this.debug = console.log;\n  }\n  this.passthroughErrors = config.passthroughErrors;\n  this.continueAfterResponse = config.continueAfterResponse;\n\n  this.accessTokenLifetime = config.accessTokenLifetime !== undefined ?\n    config.accessTokenLifetime : 3600;\n  this.refreshTokenLifetime = config.refreshTokenLifetime !== undefined ?\n    config.refreshTokenLifetime : 1209600;\n  this.authCodeLifetime = config.authCodeLifetime || 30;\n\n  this.regex = {\n    clientId: config.clientIdRegex || /^[a-z0-9-_]{3,40}$/i,\n    grantType: new RegExp('^(' + this.grants.join('|') + ')$', 'i')\n  };\n}\n\n/**\n * Authorisation Middleware\n *\n * Returns middleware that will authorise the request using oauth,\n * if successful it will allow the request to proceed to the next handler\n *\n * @return {Function} middleware\n */\nOAuth2Server.prototype.authorise = function () {\n  var self = this;\n\n  return function (req, res, next) {\n    return new Authorise(self, req, next);\n  };\n};\n\n/**\n * Grant Middleware\n *\n * Returns middleware that will grant tokens to valid requests.\n * This would normally be mounted at '/oauth/token' e.g.\n *\n * `app.all('/oauth/token', oauth.grant());`\n *\n * @return {Function} middleware\n */\nOAuth2Server.prototype.grant = function () {\n  var self = this;\n\n  return function (req, res, next) {\n    new Grant(self, req, res, next);\n  };\n};\n\n/**\n * Code Auth Grant Middleware\n *\n * @param  {Function} check Function will be called with req to check if the\n *                          user has authorised the request.\n * @return {Function}       middleware\n */\nOAuth2Server.prototype.authCodeGrant = function (check) {\n  var self = this;\n\n  return function (req, res, next) {\n    new AuthCodeGrant(self, req, res, next, check);\n  };\n};\n\n/**\n * OAuth Error Middleware\n *\n * Returns middleware that will catch OAuth errors and ensure an OAuth\n * complaint response\n *\n * @return {Function} middleware\n */\nOAuth2Server.prototype.errorHandler = function () {\n  var self = this;\n\n  return function (err, req, res, next) {\n    if (!(err instanceof error) || self.passthroughErrors) return next(err);\n\n    delete err.name;\n    delete err.message;\n\n    self.debug(err.stack || err);\n    delete err.stack;\n\n    if (err.headers) res.set(err.headers);\n    delete err.headers;\n\n    res.status(err.code).send(err);\n  };\n};\n\n/**\n * Lockdown\n *\n * When using the lockdown patter, this function should be called after\n * all routes have been declared.\n * It will search through each route and if it has not been explitly bypassed\n * (by passing oauth.bypass) then authorise will be inserted.\n * If oauth.grant has been passed it will replace it with the proper grant\n * middleware\n * NOTE: When using this method, you must PASS the method not CALL the method,\n * e.g.:\n *\n * `\n * app.all('/oauth/token', app.oauth.grant);\n *\n * app.get('/secrets', function (req, res) {\n *   res.send('secrets');\n * });\n *\n * app.get('/public', app.oauth.bypass, function (req, res) {\n *   res.send('publci');\n * });\n *\n * app.oauth.lockdown(app);\n * `\n *\n * @param  {Object} app Express app\n */\nOAuth2Server.prototype.lockdown = function (app) {\n  var self = this;\n\n  var lockdownExpress3 = function (stack) {\n    // Check if it's a grant route\n    var pos = stack.indexOf(self.grant);\n    if (pos !== -1) {\n      stack[pos] = self.grant();\n      return;\n    }\n\n    // Check it's not been explitly bypassed\n    pos = stack.indexOf(self.bypass);\n    if (pos === -1) {\n      stack.unshift(self.authorise());\n    } else {\n      stack.splice(pos, 1);\n    }\n  };\n\n  var lockdownExpress4 = function (layer) {\n    if (!layer.route)\n      return;\n\n    var stack = layer.route.stack;\n    var handlers = stack.map(function (item) {\n      return item.handle;\n    });\n\n    // Check if it's a grant route\n    var pos = handlers.indexOf(self.grant);\n    if (pos !== -1) {\n      stack[pos].handle = self.grant();\n      return;\n    }\n\n    // Check it's not been explitly bypassed\n    pos = handlers.indexOf(self.bypass);\n    if (pos === -1) {\n      // Add authorise another route (could do it properly with express.route?)\n      var copy = {};\n      var first = stack[0];\n      for (var key in first) {\n        copy[key] = first[key];\n      }\n      copy.handle = self.authorise();\n      stack.unshift(copy);\n    } else {\n      stack.splice(pos, 1);\n    }\n  };\n\n  if (app.routes) {\n    for (var method in app.routes) {\n      app.routes[method].forEach(function (route) {\n        lockdownExpress3(route.callbacks);\n      });\n    }\n  } else {\n    app._router.stack.forEach(lockdownExpress4);\n  }\n};\n\n/**\n * Bypass\n *\n * This is used as placeholder for when using the lockdown pattern\n *\n * @return {Function} noop\n */\nOAuth2Server.prototype.bypass = function () {};\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/error.js":"/**\n * Copyright 2013-present NightWorld.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar util = require('util');\n\nmodule.exports = OAuth2Error;\n\n/**\n * Error\n *\n * @param {Number} code        Numeric error code\n * @param {String} error       Error descripton\n * @param {String} description Full error description\n */\nfunction OAuth2Error (error, description, err) {\n  if (!(this instanceof OAuth2Error))\n    return new OAuth2Error(error, description, err);\n\n  Error.call(this);\n\n  this.name = this.constructor.name;\n  if (err instanceof Error) {\n    this.message = err.message;\n    this.stack = err.stack;\n  } else {\n    this.message = description;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  this.headers = {\n    'Cache-Control': 'no-store',\n    'Pragma': 'no-cache'\n  };\n\n  switch (error) {\n    case 'invalid_client':\n      this.headers['WWW-Authenticate'] = 'Basic realm=\"Service\"';\n      /* falls through */\n    case 'invalid_grant':\n    case 'invalid_request':\n      this.code = 400;\n      break;\n    case 'invalid_token':\n      this.code = 401;\n      break;\n    case 'server_error':\n      this.code = 503;\n      break;\n    default:\n      this.code = 500;\n  }\n\n  this.error = error;\n  this.error_description = description || error;\n}\n\nutil.inherits(OAuth2Error, Error);\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/authCodeGrant.js":"/**\n * Copyright 2013-present NightWorld.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar error = require('./error'),\n  runner = require('./runner'),\n  token = require('./token');\n\nmodule.exports = AuthCodeGrant;\n\n/**\n * This is the function order used by the runner\n *\n * @type {Array}\n */\nvar fns = [\n  checkParams,\n  checkClient,\n  checkUserApproved,\n  generateCode,\n  saveAuthCode,\n  redirect\n];\n\n/**\n * AuthCodeGrant\n *\n * @param {Object}   config Instance of OAuth object\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction AuthCodeGrant(config, req, res, next, check) {\n  this.config = config;\n  this.model = config.model;\n  this.req = req;\n  this.res = res;\n  this.check = check;\n\n  var self = this;\n  runner(fns, this, function (err) {\n    if (err && res.oauthRedirect) {\n      // Custom redirect error handler\n      res.redirect(self.client.redirectUri + '?error=' + err.error +\n        '&error_description=' + err.error_description + '&code=' + err.code);\n\n      return self.config.continueAfterResponse ? next() : null;\n    }\n\n    next(err);\n  });\n}\n\n/**\n * Check Request Params\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkParams (done) {\n  var body = this.req.body;\n  var query = this.req.query;\n  if (!body && !query) return done(error('invalid_request'));\n\n  // Response type\n  this.responseType = body.response_type || query.response_type;\n  if (this.responseType !== 'code') {\n    return done(error('invalid_request',\n      'Invalid response_type parameter (must be \"code\")'));\n  }\n\n  // Client\n  this.clientId = body.client_id || query.client_id;\n  if (!this.clientId) {\n    return done(error('invalid_request',\n      'Invalid or missing client_id parameter'));\n  }\n\n  // Redirect URI\n  this.redirectUri = body.redirect_uri || query.redirect_uri;\n  if (!this.redirectUri) {\n    return done(error('invalid_request',\n      'Invalid or missing redirect_uri parameter'));\n  }\n\n  done();\n}\n\n/**\n * Check client against model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkClient (done) {\n  var self = this;\n  this.model.getClient(this.clientId, null, function (err, client) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!client) {\n      return done(error('invalid_client', 'Invalid client credentials'));\n    } else if (Array.isArray(client.redirectUri)) {\n      if (client.redirectUri.indexOf(self.redirectUri) === -1) {\n        return done(error('invalid_request', 'redirect_uri does not match'));\n      }\n      client.redirectUri = self.redirectUri;\n    } else if (client.redirectUri !== self.redirectUri) {\n      return done(error('invalid_request', 'redirect_uri does not match'));\n    }\n\n    // The request contains valid params so any errors after this point\n    // are redirected to the redirect_uri\n    self.res.oauthRedirect = true;\n    self.client = client;\n\n    done();\n  });\n}\n\n/**\n * Check client against model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkUserApproved (done) {\n  var self = this;\n  this.check(this.req, function (err, allowed, user) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!allowed) {\n      return done(error('access_denied',\n        'The user denied access to your application'));\n    }\n\n    self.user = user;\n    done();\n  });\n}\n\n/**\n * Check client against model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction generateCode (done) {\n  var self = this;\n  token(this, 'authorization_code', function (err, code) {\n    self.authCode = code;\n    done(err);\n  });\n}\n\n/**\n * Check client against model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction saveAuthCode (done) {\n  var expires = new Date();\n  expires.setSeconds(expires.getSeconds() + this.config.authCodeLifetime);\n\n  this.model.saveAuthCode(this.authCode, this.client.clientId, expires,\n      this.user, function (err) {\n    if (err) return done(error('server_error', false, err));\n    done();\n  });\n}\n\n/**\n * Check client against model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction redirect (done) {\n  this.res.redirect(this.client.redirectUri + '?code=' + this.authCode +\n      (this.req.query.state ? '&state=' + this.req.query.state : ''));\n\n  if (this.config.continueAfterResponse)\n    return done();\n}\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/runner.js":"\n\nmodule.exports = runner;\n\n/**\n * Run through the sequence of functions\n *\n * @param  {Function} next\n * @public\n */\nfunction runner (fns, context, next) {\n  var last = fns.length - 1;\n\n  (function run(pos) {\n    fns[pos].call(context, function (err) {\n      if (err || pos === last) return next(err);\n      run(++pos);\n    });\n  })(0);\n}\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/token.js":"/**\n * Copyright 2013-present NightWorld.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar crypto = require('crypto'),\n  error = require('./error');\n\nmodule.exports = Token;\n\n/**\n * Token generator that will delegate to model or\n * the internal random generator\n *\n * @param  {String}   type     'accessToken' or 'refreshToken'\n * @param  {Function} callback\n */\nfunction Token (config, type, callback) {\n  if (config.model.generateToken) {\n    config.model.generateToken(type, config.req, function (err, token) {\n      if (err) return callback(error('server_error', false, err));\n      if (!token) return generateRandomToken(callback);\n      callback(false, token);\n    });\n  } else {\n    generateRandomToken(callback);\n  }\n}\n\n/**\n * Internal random token generator\n *\n * @param  {Function} callback\n */\nvar generateRandomToken = function (callback) {\n  crypto.randomBytes(256, function (ex, buffer) {\n    if (ex) return callback(error('server_error'));\n\n    var token = crypto\n      .createHash('sha1')\n      .update(buffer)\n      .digest('hex');\n\n    callback(false, token);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/authorise.js":"/**\n * Copyright 2013-present NightWorld.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar error = require('./error'),\n  runner = require('./runner');\n\nmodule.exports = Authorise;\n\n/**\n * This is the function order used by the runner\n *\n * @type {Array}\n */\nvar fns = [\n  getBearerToken,\n  checkToken\n];\n\n/**\n * Authorise\n *\n * @param {Object}   config Instance of OAuth object\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction Authorise (config, req, next) {\n  this.config = config;\n  this.model = config.model;\n  this.req = req;\n\n  runner(fns, this, next);\n}\n\n/**\n * Get bearer token\n *\n * Extract token from request according to RFC6750\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction getBearerToken (done) {\n  var headerToken = this.req.get('Authorization'),\n    getToken =  this.req.query.access_token,\n    postToken = this.req.body ? this.req.body.access_token : undefined;\n\n  // Check exactly one method was used\n  var methodsUsed = (headerToken !== undefined) + (getToken !== undefined) +\n    (postToken !== undefined);\n\n  if (methodsUsed > 1) {\n    return done(error('invalid_request',\n      'Only one method may be used to authenticate at a time (Auth header,  ' +\n        'GET or POST).'));\n  } else if (methodsUsed === 0) {\n    return done(error('invalid_request', 'The access token was not found'));\n  }\n\n  // Header: http://tools.ietf.org/html/rfc6750#section-2.1\n  if (headerToken) {\n    var matches = headerToken.match(/Bearer\\s(\\S+)/);\n\n    if (!matches) {\n      return done(error('invalid_request', 'Malformed auth header'));\n    }\n\n    headerToken = matches[1];\n  }\n\n  // POST: http://tools.ietf.org/html/rfc6750#section-2.2\n  if (postToken) {\n    if (this.req.method === 'GET') {\n      return done(error('invalid_request',\n        'Method cannot be GET When putting the token in the body.'));\n    }\n\n    if (!this.req.is('application/x-www-form-urlencoded')) {\n      return done(error('invalid_request', 'When putting the token in the ' +\n        'body, content type must be application/x-www-form-urlencoded.'));\n    }\n  }\n\n  this.bearerToken = headerToken || postToken || getToken;\n  done();\n}\n\n/**\n * Check token\n *\n * Check it against model, ensure it's not expired\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkToken (done) {\n  var self = this;\n  this.model.getAccessToken(this.bearerToken, function (err, token) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!token) {\n      return done(error('invalid_token',\n        'The access token provided is invalid.'));\n    }\n\n    if (token.expires !== null &&\n      (!token.expires || token.expires < new Date())) {\n      return done(error('invalid_token',\n        'The access token provided has expired.'));\n    }\n\n    // Expose params\n    self.req.oauth = { bearerToken: token };\n    self.req.user = token.user ? token.user : { id: token.userId };\n\n    done();\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-oauth2-server/node_modules/oauth2-server/lib/grant.js":"/**\n * Copyright 2013-present NightWorld.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar auth = require('basic-auth'),\n  error = require('./error'),\n  runner = require('./runner'),\n  token = require('./token');\n\nmodule.exports = Grant;\n\n/**\n * This is the function order used by the runner\n *\n * @type {Array}\n */\nvar fns = [\n  extractCredentials,\n  checkClient,\n  checkGrantTypeAllowed,\n  checkGrantType,\n  exposeUser,\n  generateAccessToken,\n  saveAccessToken,\n  generateRefreshToken,\n  saveRefreshToken,\n  sendResponse\n];\n\n/**\n * Grant\n *\n * @param {Object}   config Instance of OAuth object\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction Grant (config, req, res, next) {\n  this.config = config;\n  this.model = config.model;\n  this.now = new Date();\n  this.req = req;\n  this.res = res;\n\n  runner(fns, this, next);\n}\n\n/**\n * Basic request validation and extraction of grant_type and client creds\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction extractCredentials (done) {\n  // Only POST via application/x-www-form-urlencoded is acceptable\n  if (this.req.method !== 'POST' ||\n      !this.req.is('application/x-www-form-urlencoded')) {\n    return done(error('invalid_request',\n      'Method must be POST with application/x-www-form-urlencoded encoding'));\n  }\n\n  // Grant type\n  this.grantType = this.req.body && this.req.body.grant_type;\n  if (!this.grantType || !this.grantType.match(this.config.regex.grantType)) {\n    return done(error('invalid_request',\n      'Invalid or missing grant_type parameter'));\n  }\n\n  // Extract credentials\n  // http://tools.ietf.org/html/rfc6749#section-3.2.1\n  this.client = credsFromBasic(this.req) || credsFromBody(this.req);\n  if (!this.client.clientId ||\n      !this.client.clientId.match(this.config.regex.clientId)) {\n    return done(error('invalid_client',\n      'Invalid or missing client_id parameter'));\n  } else if (!this.client.clientSecret) {\n    return done(error('invalid_client', 'Missing client_secret parameter'));\n  }\n\n  done();\n}\n\n/**\n * Client Object (internal use only)\n *\n * @param {String} id     client_id\n * @param {String} secret client_secret\n */\nfunction Client (id, secret) {\n  this.clientId = id;\n  this.clientSecret = secret;\n}\n\n/**\n * Extract client creds from Basic auth\n *\n * @return {Object} Client\n */\nfunction credsFromBasic (req) {\n  var user = auth(req);\n\n  if (!user) return false;\n\n  return new Client(user.name, user.pass);\n}\n\n/**\n * Extract client creds from body\n *\n * @return {Object} Client\n */\nfunction credsFromBody (req) {\n  return new Client(req.body.client_id, req.body.client_secret);\n}\n\n/**\n * Check extracted client against model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkClient (done) {\n  var self = this;\n  this.model.getClient(this.client.clientId, this.client.clientSecret,\n      function (err, client) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!client) {\n      return done(error('invalid_client', 'Client credentials are invalid'));\n    }\n\n    // Expose validated client\n    self.req.oauth = { client: client };\n\n    done();\n  });\n}\n\n/**\n * Delegate to the relvant grant function based on grant_type\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkGrantType (done) {\n  if (this.grantType.match(/^[a-zA-Z][a-zA-Z0-9+.-]+:/)\n      && this.model.extendedGrant) {\n    return useExtendedGrant.call(this, done);\n  }\n\n  switch (this.grantType) {\n    case 'authorization_code':\n      return useAuthCodeGrant.call(this, done);\n    case 'password':\n      return usePasswordGrant.call(this, done);\n    case 'refresh_token':\n      return useRefreshTokenGrant.call(this, done);\n    case 'client_credentials':\n      return useClientCredentialsGrant.call(this, done);\n    default:\n      done(error('invalid_request',\n        'Invalid grant_type parameter or parameter missing'));\n  }\n}\n\n/**\n * Grant for authorization_code grant type\n *\n * @param  {Function} done\n */\nfunction useAuthCodeGrant (done) {\n  var code = this.req.body.code;\n\n  if (!code) {\n    return done(error('invalid_request', 'No \"code\" parameter'));\n  }\n\n  var self = this;\n  this.model.getAuthCode(code, function (err, authCode) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!authCode || authCode.clientId !== self.client.clientId) {\n      return done(error('invalid_grant', 'Invalid code'));\n    } else if (authCode.expires < self.now) {\n      return done(error('invalid_grant', 'Code has expired'));\n    }\n\n    self.user = authCode.user || { id: authCode.userId };\n    if (!self.user.id) {\n      return done(error('server_error', false,\n        'No user/userId parameter returned from getauthCode'));\n    }\n\n    done();\n  });\n}\n\n/**\n * Grant for password grant type\n *\n * @param  {Function} done\n */\nfunction usePasswordGrant (done) {\n  // User credentials\n  var uname = this.req.body.username,\n    pword = this.req.body.password;\n  if (!uname || !pword) {\n    return done(error('invalid_client',\n      'Missing parameters. \"username\" and \"password\" are required'));\n  }\n\n  var self = this;\n  return this.model.getUser(uname, pword, function (err, user) {\n    if (err) return done(error('server_error', false, err));\n    if (!user) {\n      return done(error('invalid_grant', 'User credentials are invalid'));\n    }\n\n    self.user = user;\n    done();\n  });\n}\n\n/**\n * Grant for refresh_token grant type\n *\n * @param  {Function} done\n */\nfunction useRefreshTokenGrant (done) {\n  var token = this.req.body.refresh_token;\n\n  if (!token) {\n    return done(error('invalid_request', 'No \"refresh_token\" parameter'));\n  }\n\n  var self = this;\n  this.model.getRefreshToken(token, function (err, refreshToken) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!refreshToken || refreshToken.clientId !== self.client.clientId) {\n      return done(error('invalid_grant', 'Invalid refresh token'));\n    } else if (refreshToken.expires !== null &&\n        refreshToken.expires < self.now) {\n      return done(error('invalid_grant', 'Refresh token has expired'));\n    }\n\n    if (!refreshToken.user && !refreshToken.userId) {\n      return done(error('server_error', false,\n        'No user/userId parameter returned from getRefreshToken'));\n    }\n\n    self.user = refreshToken.user || { id: refreshToken.userId };\n\n    if (self.model.revokeRefreshToken) {\n      return self.model.revokeRefreshToken(token, function (err) {\n        if (err) return done(error('server_error', false, err));\n        done();\n      });\n    }\n\n    done();\n  });\n}\n\n/**\n * Grant for client_credentials grant type\n *\n * @param  {Function} done\n */\nfunction useClientCredentialsGrant (done) {\n  // Client credentials\n  var clientId = this.client.clientId,\n    clientSecret = this.client.clientSecret;\n\n  if (!clientId || !clientSecret) {\n    return done(error('invalid_client',\n      'Missing parameters. \"client_id\" and \"client_secret\" are required'));\n  }\n\n  var self = this;\n  return this.model.getUserFromClient(clientId, clientSecret,\n      function (err, user) {\n    if (err) return done(error('server_error', false, err));\n    if (!user) {\n      return done(error('invalid_grant', 'Client credentials are invalid'));\n    }\n\n    self.user = user;\n    done();\n  });\n}\n\n/**\n * Grant for extended (http://*) grant type\n *\n * @param  {Function} done\n */\nfunction useExtendedGrant (done) {\n  var self = this;\n  this.model.extendedGrant(this.grantType, this.req,\n      function (err, supported, user) {\n    if (err) {\n      return done(error(err.error || 'server_error',\n        err.description || err.message, err));\n    }\n\n    if (!supported) {\n      return done(error('invalid_request',\n        'Invalid grant_type parameter or parameter missing'));\n    } else if (!user || user.id === undefined) {\n      return done(error('invalid_request', 'Invalid request.'));\n    }\n\n    self.user = user;\n    done();\n  });\n}\n\n/**\n * Check the grant type is allowed for this client\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction checkGrantTypeAllowed (done) {\n  this.model.grantTypeAllowed(this.client.clientId, this.grantType,\n      function (err, allowed) {\n    if (err) return done(error('server_error', false, err));\n\n    if (!allowed) {\n      return done(error('invalid_client',\n        'The grant type is unauthorised for this client_id'));\n    }\n\n    done();\n  });\n}\n\n/**\n * Expose user\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction exposeUser (done) {\n  this.req.user = this.user;\n\n  done();\n}\n\n/**\n * Generate an access token\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction generateAccessToken (done) {\n  var self = this;\n  token(this, 'accessToken', function (err, token) {\n    self.accessToken = token;\n    done(err);\n  });\n}\n\n/**\n * Save access token with model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction saveAccessToken (done) {\n  var accessToken = this.accessToken;\n\n  // Object idicates a reissue\n  if (typeof accessToken === 'object' && accessToken.accessToken) {\n    this.accessToken = accessToken.accessToken;\n    return done();\n  }\n\n  var expires = null;\n  if (this.config.accessTokenLifetime !== null) {\n    expires = new Date(this.now);\n    expires.setSeconds(expires.getSeconds() + this.config.accessTokenLifetime);\n  }\n\n  this.model.saveAccessToken(accessToken, this.client.clientId, expires,\n      this.user, function (err) {\n    if (err) return done(error('server_error', false, err));\n    done();\n  });\n}\n\n/**\n * Generate a refresh token\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction generateRefreshToken (done) {\n  if (this.config.grants.indexOf('refresh_token') === -1) return done();\n\n  var self = this;\n  token(this, 'refreshToken', function (err, token) {\n    self.refreshToken = token;\n    done(err);\n  });\n}\n\n/**\n * Save refresh token with model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction saveRefreshToken (done) {\n  var refreshToken = this.refreshToken;\n\n  if (!refreshToken) return done();\n\n  // Object idicates a reissue\n  if (typeof refreshToken === 'object' && refreshToken.refreshToken) {\n    this.refreshToken = refreshToken.refreshToken;\n    return done();\n  }\n\n  var expires = null;\n  if (this.config.refreshTokenLifetime !== null) {\n    expires = new Date(this.now);\n    expires.setSeconds(expires.getSeconds() + this.config.refreshTokenLifetime);\n  }\n\n  this.model.saveRefreshToken(refreshToken, this.client.clientId, expires,\n      this.user, function (err) {\n    if (err) return done(error('server_error', false, err));\n    done();\n  });\n}\n\n/**\n * Create an access token and save it with the model\n *\n * @param  {Function} done\n * @this   OAuth\n */\nfunction sendResponse (done) {\n  var response = {\n    token_type: 'bearer',\n    access_token: this.accessToken\n  };\n\n  if (this.config.accessTokenLifetime !== null) {\n    response.expires_in = this.config.accessTokenLifetime;\n  }\n\n  if (this.refreshToken) response.refresh_token = this.refreshToken;\n\n  this.res.set({'Cache-Control': 'no-store', 'Pragma': 'no-cache'});\n  this.res.jsonp(response);\n\n  if (this.config.continueAfterResponse)\n    done();\n}\n"}